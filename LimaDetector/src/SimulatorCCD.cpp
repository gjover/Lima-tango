static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         SimulatorCCD.cpp
//
// description :  C++ source for the SimulatorCCD and its commands.
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                SimulatorCCD are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//          This file is generated by POGO
//    (Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================


#include <SimulatorCCD.h>
#include <SimulatorCCDClass.h>
#include <tango.h>
#include <PogoHelper.h>

namespace SimulatorCCD_ns
{

//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::SimulatorCCD(string &s)
//
// description :     constructor for simulated SimulatorCCD
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name
//
//-----------------------------------------------------------------------------
SimulatorCCD::SimulatorCCD(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
    init_device();
}

SimulatorCCD::SimulatorCCD(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
    init_device();
}

SimulatorCCD::SimulatorCCD(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
    init_device();
}
//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::delete_device()
//
// description :     will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::delete_device()
{
    INFO_STREAM << "SimulatorCCD::SimulatorCCD() delete device " << device_name << endl;        
	//    Delete device allocated objects
    DELETE_SCALAR_ATTRIBUTE(attr_exposureTime_read);

    //!!!! ONLY LimaDetector device can do this !!!!
    //if(m_ct!=0)
    //{
    //    ControlFactory::instance().reset("SimulatorCCD");
    //    m_ct = 0;
    //}
}

//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::init_device()
//
// description :     will be called at device initialization.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::init_device()
{
    INFO_STREAM << "SimulatorCCD::SimulatorCCD() create device " << device_name << endl;

    // Initialise variables to default values
    //--------------------------------------------
    CREATE_SCALAR_ATTRIBUTE(attr_exposureTime_read,1.0);
    m_is_device_initialized = false;
    m_status_message.str("");

    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("SimulatorCCD");

        //- get interface to specific camera
        m_hw = dynamic_cast<Simulator::Interface*>(m_ct->hwInterface());
        if(m_hw==0)
        {
            INFO_STREAM<<"Initialization Failed : Unable to get the interface of camera plugin "<<"("<<"SimulatorCCD"<<") !"<< endl;
            m_status_message <<"Initialization Failed : Unable to get the interface of camera plugin "<<"("<<"SimulatorCCD"<<") !"<< endl;
            m_is_device_initialized = false;
            set_state(Tango::INIT);
            return;
        }

    }
    catch(Exception& e)
    {
        INFO_STREAM<<"Initialization Failed : "<<e.getErrMsg()<<endl;
        m_status_message <<"Initialization Failed : "<<e.getErrMsg( )<< endl;
        m_is_device_initialized = false;
        set_state(Tango::INIT);
        return;
    }
    catch(...)
    {
        INFO_STREAM<<"Initialization Failed : UNKNOWN"<<endl;
        m_status_message <<"Initialization Failed : UNKNOWN"<< endl;
        set_state(Tango::INIT);
        m_is_device_initialized = false;
        return;
    }
    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    this->dev_state();
}

//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::always_executed_hook()
//
// description :     method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void SimulatorCCD::always_executed_hook()
{
	DEBUG_STREAM << "SimulatorCCD::always_executed_hook() entering... "<< endl;
	try
    {
    	//- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("SimulatorCCD");

        //- get interface to specific detector
        if(m_ct!=0)
            m_hw = dynamic_cast<Simulator::Interface*>(m_ct->hwInterface());

    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message <<"Initialization Failed : "<<e.getErrMsg( )<< endl;
        //- throw exception
        set_state(Tango::INIT);
        m_is_device_initialized = false;
        return;
    }
    catch(...)
    {
        ERROR_STREAM<<"Initialization Failed : UNKNOWN"<<endl;
        m_status_message <<"Initialization Failed : UNKNOWN"<< endl;
        //- throw exception
        set_state(Tango::INIT);
        m_is_device_initialized = false;
        return;
    }
}
//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::read_attr_hardware
//
// description :     Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::read_attr_hardware(vector<long> &attr_list)
{
    DEBUG_STREAM << "SimulatorCCD::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
    //    Add your own code here
}
//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::read_exposureTime
//
// description :     Extract real attribute values for exposureTime acquisition result.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::read_exposureTime(Tango::Attribute &attr)
{
    DEBUG_STREAM << "SimulatorCCD::read_exposureTime(Tango::Attribute &attr) entering... "<< endl;
    if(m_ct!=0)
    {
        try
        {
            double exposure;
            m_ct->acquisition()->getAcqExpoTime(exposure);
            *attr_exposureTime_read = (Tango::DevDouble)(exposure*1000.0);
            attr.set_value(attr_exposureTime_read);
        }
        catch(Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                        static_cast<const char*> ("SimulatorCCD::read_exposureTime"));
        }
        catch(Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception(
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (e.getErrMsg().c_str()),
                        static_cast<const char*> ("SimulatorCCD::read_exposureTime"));
        }
    }
}

//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::write_exposureTime
//
// description :     Write exposureTime attribute values to hardware.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::write_exposureTime(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "SimulatorCCD::write_exposureTime(Tango::WAttribute &attr) entering... "<< endl;
    if(m_ct!=0)
    {
        try
        {
            attr.get_write_value(attr_exposureTime_write);
            m_ct->acquisition()->setAcqExpoTime((double)(attr_exposureTime_write/1000.0));
        }
        catch(Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                        static_cast<const char*> ("SimulatorCCD::write_exposureTime"));
        }
        catch(Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception(
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (e.getErrMsg().c_str()),
                        static_cast<const char*> ("SimulatorCCD::write_exposureTime"));
        }
    }
}


//+------------------------------------------------------------------
/**
 *    method:    SimulatorCCD::dev_state
 *
 *    description:    method to execute "State"
 *    This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return    State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState SimulatorCCD::dev_state()
{
    Tango::DevState    argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "SimulatorCCD::dev_state(): entering... !" << endl;
    //    Add your own code to control device here
    stringstream    DeviceStatus;
    DeviceStatus     << "";
    Tango::DevState DeviceState    = Tango::STANDBY;
    if(!m_is_device_initialized )
    {
        DeviceState            = Tango::INIT;
        DeviceStatus        << m_status_message.str();
    }
    else if (m_ct==0)
    {
        DeviceState            = Tango::INIT;
        DeviceStatus        <<"Initialization Failed : Unable to get the lima control object !\n\n";
    }
    else
    {
    	CtControl::Status status;
		m_ct->getStatus(status);
		if (status.AcquisitionStatus == lima::AcqReady)
		{
			HwInterface::StatusType state;
			m_hw->getStatus(state);
			if(state.acq == AcqRunning && state.det == DetExposure)
			{
				DeviceState=Tango::RUNNING;
				DeviceStatus<<"Acquisition is Running ...\n"<<endl;
			}
			else if(state.acq == AcqFault && state.det == DetFault)
			{
				DeviceState=Tango::INIT;//INIT
				DeviceStatus<<"Acquisition is in Init\n"<<endl;
			}
			else if(state.acq == AcqFault && state.det == DetIdle)
			{
				DeviceState=Tango::FAULT;//FAULT
				DeviceStatus<<"Acquisition is in Fault\n"<<endl;
			}
			else
			{
				DeviceState=Tango::STANDBY;
				DeviceStatus<<"Waiting for Request ...\n"<<endl;
			}
		}
		else if(status.AcquisitionStatus == lima::AcqRunning)
		{
			DeviceState=Tango::RUNNING;
			DeviceStatus<<"Acquisition is Running ...\n"<<endl;
		}
		else
		{
			HwInterface::StatusType state;
			m_hw->getStatus(state);
			if(state.acq == AcqFault && state.det == DetFault)
			{
				DeviceState=Tango::INIT;//INIT
				DeviceStatus<<"Acquisition is in Init\n"<<endl;
			}
			else
			{
			  DeviceState=Tango::FAULT;//FAULT
			  DeviceStatus<<"Acquisition is in Fault\n"<<endl;
			}
		}
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;
    return argout;
}






}	//	namespace
